#!/bin/bash -e
#	File Name: stats
# This shell script calculates the average and median
# for either the rows and columns of a text file
# that contains numbers.

# Make sure any temporary files are removed
# if the program is forcefully stopped.
trap "rm â€“f $*$$; exit 1" INT HUP TERM

# Check user options
usageMessage="Usage: stats {-rows|-cols} [file]"
if [[ "$#" -gt "2" || "$#" -lt "1" ]];
then
	echo $usageMessage;
	exit 1;
fi
# Check that the first argument is correct.
if ! [[ $1 == -r* || $1 == -c* ]];
then
	echo $usageMessage;
	exit 1;
fi
# If two arguments, check that file name, identified by second argument, is readable.
if [[ "$#" == "2" ]] && ! [[ -r $2 ]];
then
	echo "stats: cannot read $2";
	exit 1;
fi


# Get user data based on options.
tempDataFile="tempDataFile$$"
inputDataFile="stdInputFile$$"
if [ "$#" == "1" ];
then
	cat > $inputDataFile;
	# trace statement
	echo -e "Only one arg. Storing user input in new file stdInputFile$$"; 
elif [ "$#" = "2" ];
then
	inputDataFile=$2;
	# trace statement
	echo -e "Two args. Using $2 as the input file";
fi

# trace statement
cat $inputDataFile


# Create the temporary file used for calculations
# and validate input.
# [[ $var =~ ^-{0,1}[0-9]+$ ]] && echo "Is integer."
calculationSourceFile=""
if [[ $1 == -r* ]];
then
	# trace statement
	echo "row stats";
	calculationSourceFile=$inputDataFile
elif [[ $1 == -c* ]];
then
	# trace statement
	echo "column stats";
	read -ra array < $inputDataFile
	for index in ${!array[@]}
	do
		echo `expr $index + 1`	
	done
fi


rm -f *$$

exit 0;


# Read and store numbers from file input, read in different order
# depending on whether rows or columns is the option.
# The data will be lists of numbers.

read inputrow
read -r -a array <<< "$inputrow"
# if read from standard input
# then use the read command to prompt the user
# else read from file as illustrated in the following
echo "1 2 3" > input_file
counter=0
for line in `cat "input_file"`; do
	echo $line
	((counter++));
done

echo $counter
# Calculate averages and medians from the lists of numbers
# and store in separate data structure or temporary file.

# Output the calculations.


# Hints: Use trap command when dealing with temporary files
# to make sure they get deleted


# Remove all temporary files
rm -f *$$
