#!/bin/bash -e
#	File Name: stats
# This shell script calculates the average and median
# for either the rows and columns of a text file
# that contains numbers.

# Make sure any temporary files are removed
# if the program is forcefully stopped.
trap "rm â€“f $*$$; exit 1" INT HUP TERM

# Check user options
usageMessage="Usage: stats {-rows|-cols} [file]"
if [[ "$#" -gt "2" || "$#" -lt "1" ]];
then
	echo $usageMessage;
	exit 1;
fi
# Check that the first argument is correct.
if ! [[ $1 == -r* || $1 == -c* ]];
then
	echo $usageMessage;
	exit 1;
fi
# If two arguments, check that file name, identified by second argument, is readable.
if [[ "$#" == "2" ]] && ! [[ -r $2 ]];
then
	echo "stats: cannot read $2";
	exit 1;
fi


# Get user data based on options.
inputFile="stdInputFile$$"
if [ "$#" == "1" ];
then
	cat > $inputFile;
	# trace statement
	#echo -e "Only one arg. Storing user input in new file stdInputFile$$"; 
elif [ "$#" == "2" ];
then
	inputFile=$2;
	# trace statement
	#echo -e "Two args. Using $2 as the input file";
fi
# trace statement
#cat $inputFile


# dataFile will either be the inputFile provided in the previous if statement
# (if calculating based on the -r* option)
# or created, as a temporary file, as the transpose of inputFile
# (if calculating based on the -c* option)
dataFile=""
if [[ $1 == -r* ]];
then
	# trace statement
	#echo "row stats";
	dataFile=$inputFile
elif [[ $1 == -c* ]];
then
	# trace statement
	#echo "column stats";
	dataFile="dataFile$$"
	read -ra array < $inputFile
	for index in ${!array[@]}
	do
		column=`expr $index + 1`	
		# transpose each returned column from the cut
		# and append it as a new line to dataFile
		cut -f $column $inputFile | tr '\n' '\t' >> $dataFile
		echo "" >> $dataFile
	done
fi
# trace statements
#echo "The input file:"
#cat $inputFile
#echo "The data file:"
cat $dataFile

# Read from input.
# Validate with something like [[ $var =~ ^-{0,1}[0-9]+$ ]] && echo "Is integer."
# Calculate averages and medians from the lists of numbers
# and store in separate data structure or temporary file.
while read line
do
	echo $line
	# Do the validation and calculation stuff here
	# and append to an output file as you go.
done <$dataFile


exit 0;


# Output the calculations.


# Remove all temporary files
rm -f *$$


# Note: some problems with trap.  Test this well!!

